<div id="app">
    <el-card class="box-card mb-1">
        <el-button @click="handleProjectNew" type="primary" size="medium" icon="el-icon-plus">新增项目</el-button>
    </el-card>
    <!-- 进展中的项目 -->
    <el-card v-for="project in projects" :key="project.id" class="box-card mb-1">
        <div slot="header" class="header-cc">
            <el-link :href="`/projects/${project.id}`" target="_blank" type="primary">{{ project.name }}</el-link>
            <div>
                <el-button @click="handleCallOverview(project.id)" size="mini" icon="el-icon-star-on">总览</el-button>
                <el-button @click="handleNewReq(project.id, project.name);" size="mini" type="primary" icon="el-icon-plus">
                    新增需求
                </el-button>
            </div>
        </div>
        <div>
            <el-row :gutter="10">
                <el-col :span="8">
                    <el-descriptions :column="2" size="mini" border>
                        <el-descriptions-item label="项目编码">{{ project.code }}</el-descriptions-item>
                        <el-descriptions-item label="PM">{{ project.pm_name }}</el-descriptions-item>
                        <el-descriptions-item label="公司简称">{{ project.company_name_abbr }}</el-descriptions-item>
                        <el-descriptions-item label="客户联系人">{{ project.client_contact }}</el-descriptions-item>
                        <el-descriptions-item label="项目状态">
                            <el-tag :type="{ 'initialized': 'warning', 'ongoing': 'success', 'finished': 'info', 'billing': 'primary', 'billed': 'info'}[project.status]" size="mini">
                                    {{ status_dict[project.status] }}
                                </el-tag>
                        </el-descriptions-item>
                        <el-descriptions-item label="更新时间">{{ project.updated_at }}</el-descriptions-item>
                    </el-descriptions>
                </el-col>
                <el-col :span="16">
                    <el-table :data="project.project_requirements" size="mini" border stripe>
                        <el-table-column prop="category" label="需求类型"></el-table-column>
                        <el-table-column prop="demand_number" label="可约访/需求人数">
                            <template slot-scope="scope">
                                {{ scope.row.call_records.filter(c => c.rec_status === 'ok').length }} /
                                {{ scope.row.demand_number }}
                            </template>
                        </el-table-column>
                        <el-table-column prop="created_at" label="创建时间">
                            <template slot-scope="scope">
                                <el-tooltip :content="scope.row.created_at.split(' ')[1]" placement="right">
                                    <el-button size="mini" type="text">{{ scope.row.created_at.split(' ')[0] }}</el-button>
                                </el-tooltip>
                            </template>
                        </el-table-column>
                        <el-table-column prop="operator" label="操作员"></el-table-column>
                        <el-table-column prop="status" label="需求状态">
                            <template slot-scope="scope">
                                <el-dropdown trigger="click">
                                    <span>
                                        <el-tag :type="req_status_tag_type[scope.row.status]" size="mini">
                                            {{ req_status_dict[scope.row.status] }}
                                        </el-tag>
                                        <i class="el-icon-arrow-down el-icon--right"></i>
                                    </span>
                                    <el-dropdown-menu slot="dropdown">
                                        <el-dropdown-item v-for="(val, key) in req_status_dict" :key="key">
                                            <el-tag @click="update_req_status(key, scope.row.id)" :type="req_status_tag_type[key]" size="mini">
                                                {{ req_status_dict[key] }}
                                            </el-tag>
                                        </el-dropdown-item>
                                    </el-dropdown-menu>
                                </el-dropdown>
                            </template>
                        </el-table-column>
                        <el-table-column prop="priority" label="紧急程度">
                            <template slot-scope="scope">
                                <el-switch
                                    v-model="scope.row.priority"
                                    active-color="#dc3545"
                                    :active-value="1"
                                    :inactive-value="0"
                                    @change="update_priority($event, scope.row.id)"
                                >
                                </el-switch>
                            </template>
                        </el-table-column>
                        <el-table-column label="更新状态">
                            <template slot-scope="scope">
                                <el-button 
                                    v-if="scope.row.call_records.filter(c =>  c.rec_status === 'recommended').length"
                                    @click="handleCallOverview(project.id, scope.row.id)"
                                    type="danger" size="mini" icon="el-icon-star-on">
                                    + {{ scope.row.call_records.filter(c =>  c.rec_status === 'recommended').length }}
                                </el-button>
                            </template>
                        </el-table-column>
                        <el-table-column prop="title" label="需求内容" min-width="120">
                            <template slot-scope="scope">
                                <el-link @click="show_drawer(scope.row.title, scope.row.content)" type="primary">
                                    {{ scope.row.title | truncate(20) }}
                                </el-link>
                            </template>
                        </el-table-column>
                    </el-table>
                </el-col>
            </el-row>
        </div>
    </el-card>

    <el-pagination
        :total="search_form.total"
        :current-page.sync="search_form.page"
        :page-size.sync="search_form.per_page"
        :page-sizes="[10, 20, 50]"
        @current-change="handlePageChange"
        @size-change="handlePageChange"
        background
        layout="total, sizes, prev, pager, next, jumper"
        style="text-align: center;"
        >
    </el-pagination>

    <!-- 需求内容详情 -->
    <el-drawer :title="drawer.title" :visible.sync="drawer.visible" direction="rtl" size="40%">
        <div class="drawer-content">{{ drawer.content }}</div>
    </el-drawer>

    <!-- 新增需求form -->
    <el-dialog :title="`新增需求 - ${newReqForm.project_name}`" :visible.sync="newReqFormVisible">
        <el-form ref="newReqForm" :model="newReqForm" size="small" label-width="80px">
            <el-form-item label="标题" prop="title" :rules="newReqFormRules.title">
                <el-input v-model="newReqForm.title" clearable></el-input>
            </el-form-item>
            <el-form-item label="内容" prop="content" :rules="newReqFormRules.content">
                <el-input v-model="newReqForm.content" type="textarea" :rows="5" clearable></el-input>
            </el-form-item>
            <el-form-item label="需求类型" prop="category">
                <el-input v-model="newReqForm.category" clearable></el-input>
            </el-form-item>
            <el-form-item label="需求人数" prop="demand_number" :rules="newReqFormRules.demand_number">
                <el-input-number v-model="newReqForm.demand_number" controls-position="right" :min="1"></el-input-number>
            </el-form-item>
            <el-form-item label="操作员" prop="operator_id" :rules="newReqFormRules.operator_id">
                <el-select v-model="newReqForm.operator_id" placeholder="Please select" clearable>
                    <el-option v-for="opt in user_options" :key="opt[1]" :label="opt[0]" :value="opt[1]"></el-option>
                </el-select>
            </el-form-item>
            <el-upload
                action="/"
                :file-list="newReqForm.fileList"
                :limit="3"
                :auto-upload="false"
                :on-change="handleNewReqFileChange"
                :on-remove="handleNewReqFileChange"
            >
              <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
              <div slot="tip" class="el-upload__tip">最多选择3个文件上传</div>
            </el-upload>
        </el-form>
        <span slot="footer">
            <el-button size="small" @click="newReqFormVisible = false">取消</el-button>
            <el-button type="primary" size="small" @click="handleNewReqSubmit">确定</el-button>
        </span>
    </el-dialog>

    <!-- 总览 & 推荐更新 table -->
    <el-dialog :title="callOverviewTitle" :visible.sync="callOverviewVisible"  width="80%">
        <el-table :data="callOverview" size="mini" border stripe>
            <el-table-column prop="category" label="类型" width="72">
                <template slot-scope="scope">
                    <span v-if="scope.row.category === 'doctor'" ><i class="fa fa-user-circle text-danger"></i> 医生</span>
                    <span v-else><i class="fa fa-user-circle text-primary"></i> 专家</span>
                </template>
            </el-table-column>
            <el-table-column prop="name" label="姓名"></el-table-column>
            <el-table-column prop="phone" label="电话"></el-table-column>
            <el-table-column prop="company" label="公司/医院"></el-table-column>
            <el-table-column prop="department" label="部门/科室"></el-table-column>
            <el-table-column prop="title" label="职位"></el-table-column>
            <el-table-column prop="memo" label="备注"></el-table-column>
            <el-table-column prop="rec_description" label="推荐描述">
                <template slot-scope="scope">
                    <el-button @click="handleRecDescription(scope.row.rec_description)" size="mini">查看</el-button>
                </template>
            </el-table-column>
            <el-table-column prop="rec_status" label="推荐状态">
                <template slot-scope="scope">
                    <el-dropdown trigger="click">
                        <span>
                            <el-tag :type="call_rec_status_tag_type[scope.row.rec_status]" size="mini">
                                {{ call_rec_status_dict[scope.row.rec_status] }}
                            </el-tag>
                            <i class="el-icon-arrow-down el-icon--right"></i>
                        </span>
                        <el-dropdown-menu slot="dropdown">
                            <el-dropdown-item v-for="(val, key) in call_rec_status_dict" :key="key">
                                <el-tag @click="update_call_rec_status(key, scope.row.id)" :type="call_rec_status_tag_type[key]" size="mini">
                                    {{ call_rec_status_dict[key] }}
                                </el-tag>
                            </el-dropdown-item>
                        </el-dropdown-menu>
                    </el-dropdown>
                </template>
            </el-table-column>
        </el-table>
        <span slot="footer">
            <el-button size="small" @click="callOverviewVisible = false">取消</el-button>
        </span>
    </el-dialog>

    <el-dialog title="推荐描述" :visible.sync="recDescriptionVisible">
        <div id="rec-description-content" class="rec-description-cc">{{ recDescription }}</div>
        <span slot="footer">
            <el-button @click="clipboard" type="primary" size="small">复制</el-button>
        </span>
    </el-dialog>
</div>

<script>
    var app = new Vue({
        el: '#app',
        data: {
            projects: [],
            search_form: {
                page: 1,
                per_page: 10,
                total: 0
            },
            newReqForm: {
                project_id: '',
                project_name: '',
                title: '',
                content: '',
                category: '',
                demand_number: '',
                operator_id: '',
                fileList: []
            },
            newReqFormRules: {
                title: [
                    { required: true, message: '标题不能为空'},
                ],
                content: [
                    { required: true, message: '内容不能为空'},
                ],
                demand_number: [
                    { required: true, message: '需求人数不能为空'},
                ],
                operator_id: [
                    { required: true, message: '请选择操作员'},
                ],
            },
            newReqFormVisible: false,
            callOverview: [],
            callOverviewTitle: '',
            callOverviewVisible: false,
            recDescription: '',
            recDescriptionVisible: false,
            user_options: [],  // 项目需求操作员
            drawer: { title: '', content: '',  visible: false },
            status_dict: <%= Project::STATUS.to_json.html_safe %>,
            req_status_dict: <%= ProjectRequirement::STATUS.to_json.html_safe %>,
            req_status_tag_type: { ongoing: 'success', finished: 'info', cancelled: 'info'},
            call_rec_status_dict: <%= CallRecord::REC_STATUS.to_json.html_safe %>,
            call_rec_status_tag_type: { init: 'info', recommended: 'primary', hold: 'warning', unsuited: 'danger', ok: 'success' },
        },
        mounted: function(){
            this.$nextTick(function(){
                console.log('mounted')
                this.load_projects()
                setInterval(() => {
                    this.load_projects()
                }, 5000)
            }) 
        },
        methods: {
            load_projects () {
                let _this_ = this;
                // console.log('load dashboard data req:', this.search_form)
                $.get('/projects/v_pm_dashboard_data', this.search_form, function (res) {
                    _this_.projects = res.data.projects
                    _this_.search_form.total = res.data.total
                })
            },
            sync_project_requirement (project_requirement) {
                // 项目需求更新后台数据后同步更新页面数据
                this.projects.map(p => {
                    let index = p.project_requirements.findIndex(req => req.id === project_requirement.id)
                    if (index !== -1) { p.project_requirements.splice(index, 1, project_requirement) }
                })
            },
            sync_call_record (call_record) {
                let _this_ = this
                this.projects.map(p => {
                    let req = p.project_requirements.find(req => req.id === call_record.project_requirement_id)
                    if (req) {
                        let index = req.call_records.findIndex(c => c.id === call_record.id)
                        if (index !== -1) { req.call_records.splice(index, 1, call_record) }
                    }
                })
                let co_index = this.callOverview.find(c => c.id === call_record.id)
                if (co_index !== -1) { this.callOverview.splice(co_index, 1, call_record) }
            },
            update_priority (priority, req_id) {
                let _this_ = this;
                console.log('update priority req:', [req_id, priority])
                $.post('/project_requirements/v_update', { id: req_id, priority: priority }, function (res) {
                    console.log('update priority res:', res)
                })
            },
            update_req_status (status, req_id) {
                let _this_ = this;
                $.post('/project_requirements/v_update', { id: req_id, status: status }, function (res) {
                    _this_.sync_project_requirement(res.data.project_requirement)
                })
            },
            update_call_rec_status (rec_status, call_record_id) {
                let _this_ = this;
                $.post('/call_records/v_update', { id: call_record_id, rec_status: rec_status }, function (res) {
                    _this_.sync_call_record(res.data.call_record)
                })
            },
            get_user_options (project_id) {
                let _this_ = this;
                fetch(`/projects/${project_id}/user_options`).then(res => res.json()).then(data => {
                    _this_.user_options = data
                })
            },
            show_drawer (title, content) {
                this.drawer = { title: title, content: content, visible: true }
            },
            handlePageChange () {
                this.load_projects()
            },
            handleProjectNew () {
                window.open('/projects/new', '_blank');
            },
            handleNewReq (project_id, project_name) {
                this.newReqFormVisible = true
                if (this.newReqForm.project_id !== project_id) {
                    this.newReqForm = { project_id: project_id, project_name: project_name, title: '', content: '',
                                        category: '', demand_number: '', operator_id: '', fileList: [] }
                    this.get_user_options(project_id)
                }
            },
            handleNewReqSubmit () {
                let _this_ = this;
                let formData = new FormData();
                formData.append('project_id', this.newReqForm.project_id)
                formData.append('title', this.newReqForm.title)
                formData.append('content', this.newReqForm.content)
                formData.append('category', this.newReqForm.category)
                formData.append('demand_number', this.newReqForm.demand_number)
                formData.append('operator_id', this.newReqForm.operator_id)
                file_count = this.newReqForm.fileList.length
                for(let i in this.newReqForm.fileList) {
                    if (i === 0) {
                        formData.append('file', this.newReqForm.fileList[i])
                    } else {
                        formData.append(`file${i}`, this.newReqForm.fileList[i])
                    }
                }
                $.ajax({
                    type: 'POST',
                    url: '/project_requirements/v_create',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(res) {
                        if (res.status === 0){
                            let project = _this_.projects.find(p => p.id === _this_.newReqForm.project_id)
                            project.project_requirements.unshift(res.data.project_requirement)
                            _this_.newReqFormVisible = false;
                            _this_.newReqForm = {}
                            _this_.$message({ message: '提交成功', type: 'success' })
                        }   else if (res.status === 1) {
                            _this_.$message({ message: res.msg, type: 'error' })
                        }
                    }
                })
            },
            handleNewReqFileChange (file, fileList) {
                this.newReqForm.fileList = fileList
            },
            handleCallOverview (project_id, project_requirement_id) {
                let call_records = []
                let project = this.projects.find(p => p.id === project_id)
                project.project_requirements.map(req => {
                    if (!project_requirement_id || req.id === project_requirement_id) {
                        req.call_records.map(c => {
                            if (c.rec_status !== 'init') call_records.push(c)
                        })
                    }
                })
                this.callOverview = call_records
                this.callOverviewTitle = project_requirement_id ? '更新状态' : '更新状态 - 总览'
                this.callOverviewVisible = true
            },
            handleRecDescription (rec_description) {
                this.recDescription = rec_description
                this.recDescriptionVisible = true
            },
            clipboard () {
                clipboard('rec-description-content')
            }
        }
    })
</script>

<style>
    .header-cc {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .el-card__header { padding: 9px 12px; }
    .el-card__body { padding: 12px; }
    .drawer-content {
        padding: 0 20px;
        font-size: 0.9rem;
        white-space: pre-line;
    }
    .rec-description-cc {
        white-space: pre-line;
    }
</style>